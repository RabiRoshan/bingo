{"version":3,"sources":["../node_modules/peerjs/dist sync","application/gameContext.js","presentation/utils/arrayShuffle.js","presentation/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","peer","Peer","GameContext","createContext","GameProvider","props","random25","generateRandom0to25","useState","Array","from","_","row","col","numberBucket","setNumberBucket","yourTurn","setYourTurn","winnerStatus","setWinnerStatus","callBingo","fromOpponent","updatedWinnerStatus","connectionState","opponentPeer","send","bingo","markValue","value","updatedBucket","map","numberBucketRow","numberItem","isMarked","setConnectionState","on","peerId","console","log","conn","onConnection","data","connect","err","Provider","joinToPeer","opponentPeerId","children","array","t","i","m","length","Math","floor","random","shuffleArray","index","Display","styled","div","ConnectionSection","DisplayGameEnd","status","css","GameSection","ReadInstructionsLink","a","JoinForm","form","CreateForm","DisplayPeerId","DisplayTurn","DisplayBingoStatus","BingoStatusItem","strike","PeerIdInput","input","RButton","button","CopyButton","copied","GameBoard","GameBox","BingoButton","GameScreen","useContext","setOpponentPeerId","join","setJoin","copiedPeerId","setCopiedPeerId","isNotConnected","totalPoints","reduce","currentItem","isBingo","colPointArray","forEach","item","b","diagonalScore","currentIndex","gameBoxes","key","disabled","onClick","preventDefault","copyPeerIdToClipboard","copy","hidden","window","location","reload","onSubmit","placeholder","required","onChange","target","rel","href","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.80cbc462.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 23;","import React, { useState, createContext } from \"react\";\nimport { shuffleArray } from \"../presentation/utils/arrayShuffle\";\nimport Peer from \"peerjs\";\nconst peer = new Peer();\n\nexport const GameContext = createContext();\n\nexport const GameProvider = (props) => {\n  const random25 = generateRandom0to25();\n\n  const [numberBucket, setNumberBucket] = useState(\n    Array.from(Array(5), (_, row) =>\n      Array.from(Array(5), (_, col) => random25[row * 5 + col])\n    )\n  );\n\n  const [yourTurn, setYourTurn] = useState(true);\n\n  // winnerStatus = 0 => draw\n  // winnerStatus = -1 => opponent won\n  // winnerStatus = 1 => you won\n  let [winnerStatus, setWinnerStatus] = useState(null);\n\n  const callBingo = (fromOpponent = false) => {\n    const updatedWinnerStatus = winnerStatus === null ? 0 : winnerStatus;\n    if (fromOpponent) {\n      setWinnerStatus(updatedWinnerStatus - 1);\n    } else {\n      setWinnerStatus(updatedWinnerStatus + 1);\n      connectionState.opponentPeer.send({ bingo: true });\n    }\n  };\n\n  const markValue = (value, fromOpponent = false) => {\n    if (!fromOpponent) {\n      setYourTurn(false);\n      connectionState.opponentPeer.send({ value });\n    } else {\n      setYourTurn(true);\n    }\n    const updatedBucket = numberBucket.map((numberBucketRow) =>\n      numberBucketRow.map((numberItem) => {\n        if (numberItem.value === value) {\n          numberItem.isMarked = true;\n        }\n        return numberItem;\n      })\n    );\n    setNumberBucket(updatedBucket);\n  };\n\n  // PeerJS\n  const [connectionState, setConnectionState] = useState({\n    peer: null,\n    opponentPeer: null,\n  });\n\n  peer.on(\"open\", (peerId) => {\n    console.log(`Your peer ID is: ${peerId}`);\n    setConnectionState({ ...connectionState, peer });\n  });\n\n  peer.on(\"disconnected\", () => {\n    console.log(`Disconnected from peer server`);\n    setConnectionState({ ...connectionState, peer: null });\n  });\n\n  peer.on(\"connection\", (conn) => onConnection(conn));\n\n  const joinToPeer = (opponentPeerId) => {\n    const opponentPeer = peer.connect(opponentPeerId);\n    setYourTurn(false);\n    onConnection(opponentPeer);\n  };\n\n  const onConnection = (opponentPeer) => {\n    console.log(`Connecting to: ${opponentPeer.peer}`);\n    opponentPeer.on(\"open\", () => {\n      console.log(\"Connected!\");\n      setConnectionState({ ...connectionState, opponentPeer });\n    });\n    opponentPeer.on(\"data\", (data) => {\n      console.log(`Data from ${opponentPeer.peer}: ${data}`);\n      if (data.value) {\n        markValue(data.value, true);\n      } else if (data.bingo) {\n        callBingo(true);\n      }\n    });\n    opponentPeer.on(\"close\", () => {\n      setConnectionState({ ...connectionState, opponentPeer: null });\n      console.log(`Connection closed with: ${opponentPeer.peer}`);\n      console.log(\"Reconnecting...\");\n      peer.connect(opponentPeer.peer);\n    });\n    opponentPeer.on(\"error\", (err) =>\n      console.log(`Connection Error with ${opponentPeer.peer}: ${err}`)\n    );\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        numberBucket,\n        markValue,\n        connectionState,\n        joinToPeer,\n        yourTurn,\n        winnerStatus,\n        callBingo,\n      }}\n    >\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n\nconst generateRandom0to25 = () =>\n  shuffleArray(\n    Array.from(Array(25), (_, index) => {\n      return { value: index + 1, isMarked: false };\n    })\n  );\n","/// Fisher–Yates Shuffle\nexport const shuffleArray = (array) => {\n  let m = array.length,\n    t,\n    i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n};\n","import React, { useContext, useState } from \"react\";\nimport copy from \"copy-to-clipboard\";\nimport styled, { css } from \"styled-components\";\nimport { GameContext } from \"../application/gameContext\";\n\nconst Display = styled.div`\n  min-height: 100vh;\n  background-color: #fbfffe;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  align-items: center;\n`;\n\nconst ConnectionSection = styled.div`\n  text-align: center;\n`;\n\nconst DisplayGameEnd = styled.div`\n  font-size: 6vw;\n  text-align: center;\n\n  ${(props) => {\n    if (props.status === 1) {\n      return css`\n        color: #00a8e8;\n      `;\n    } else if (props.status === -1) {\n      return css`\n        color: red;\n      `;\n    } else {\n      return css`\n        color: orange;\n      `;\n    }\n  }}\n`;\n\nconst GameSection = styled.div`\n  text-align: center;\n`;\n\nconst ReadInstructionsLink = styled.a`\n  color: #003459;\n`;\n\nconst JoinForm = styled.form``;\n\nconst CreateForm = styled.div``;\n\nconst DisplayPeerId = styled.div`\n  display: block;\n  font-size: 2vw;\n\n  :hover {\n    cursor: pointer;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 6vw;\n  }\n`;\n\nconst DisplayTurn = styled.div`\n  display: block;\n  color: #003459;\n  font-size: 2vw;\n  font-weight: bold;\n\n  @media (max-width: 768px) {\n    font-size: 6vw;\n  }\n  ${(props) =>\n    props.yourTurn &&\n    css`\n      color: red;\n    `}\n`;\n\nconst DisplayBingoStatus = styled.div`\n  display: flex;\n  justify-content: space-around;\n  color: #003459;\n  font-size: 2vw;\n\n  @media (max-width: 768px) {\n    font-size: 6vw;\n  }\n`;\n\nconst BingoStatusItem = styled.div`\n  ${(props) =>\n    props.strike &&\n    css`\n      text-decoration: line-through;\n      color: red;\n    `};\n`;\n\nconst PeerIdInput = styled.input`\n  display: block;\n  margin: auto;\n  background-color: #fbfffe;\n  border: 0.3vw solid #00a8e8;\n  border-radius: 1vw;\n  text-align: center;\n  font-size: 2vw;\n\n  :focus {\n    outline: none;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 6vw;\n    border-width: 0.9vw;\n    border-radius: 3vw;\n  }\n`;\n\nconst RButton = styled.button`\n  background-color: #00a8e8;\n  color: #fbfffe;\n  margin: 2vw;\n  border: none;\n  border-radius: 1vw;\n  text-align: center;\n  font-size: 2vw;\n\n  :focus {\n    outline: none;\n  }\n\n  :hover {\n    cursor: pointer;\n  }\n\n  @media (max-width: 768px) {\n    margin: 6vw;\n    font-size: 6vw;\n    border-radius: 3vw;\n  }\n`;\n\nconst CopyButton = styled(RButton)`\n  ${(props) =>\n    props.copied &&\n    css`\n      color: red;\n      background-color: #003459;\n    `};\n`;\n\nconst GameBoard = styled.div`\n  margin: 2vw;\n  display: grid;\n  grid-template-columns: repeat(5, auto);\n  grid-template-rows: auto;\n  place-content: center;\n  gap: 0.5vw;\n\n  @media (max-width: 768px) {\n    gap: 2vw;\n  }\n`;\n\nconst GameBox = styled.button`\n  background-color: #00a8e8;\n  color: #fbfffe;\n  height: 5vw;\n  width: 5vw;\n  border: none;\n  border-radius: 1vw;\n  text-align: center;\n  font-size: 2vw;\n\n  :focus {\n    outline: none;\n  }\n\n  :active {\n    background-color: #fbfffe;\n    color: #00a8e8;\n  }\n\n  ${(props) =>\n    props.isMarked &&\n    css`\n      background-color: red;\n    `};\n\n  @media (max-width: 768px) {\n    height: 15vw;\n    width: 15vw;\n    font-size: 6vw;\n    border-radius: 3vw;\n  }\n`;\n\nconst BingoButton = styled.button`\n  background-color: red;\n  margin: 1vw;\n  color: white;\n  font-size: 2vw;\n  border: none;\n  border-radius: 1vw;\n  text-align: center;\n\n  :focus {\n    outline: none;\n  }\n\n  :active {\n    background-color: white;\n    color: slategray;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 6vw;\n    margin: 3vw;\n    border-radius: 3vw;\n  }\n`;\n\nconst GameScreen = () => {\n  const {\n    numberBucket,\n    markValue,\n    connectionState,\n    joinToPeer,\n    yourTurn,\n    winnerStatus,\n    callBingo,\n  } = useContext(GameContext);\n\n  const [opponentPeerId, setOpponentPeerId] = useState(\"\");\n  const [join, setJoin] = useState(true);\n  const [copiedPeerId, setCopiedPeerId] = useState(false);\n\n  const isNotConnected =\n    connectionState.peer && connectionState.opponentPeer ? false : true;\n\n  const rowPoints = numberBucket.reduce((totalPoints, currentItem) => {\n    const isRowBingo = currentItem.reduce((isBingo, currentItem) => {\n      return isBingo && currentItem.isMarked;\n    }, true);\n    return isRowBingo ? ++totalPoints : totalPoints;\n  }, 0);\n\n  const colPoints = numberBucket\n    .reduce(\n      (colPointArray, currentItem) => {\n        currentItem.forEach((item, index) => {\n          colPointArray[index] = colPointArray[index] && item.isMarked ? 1 : 0;\n        });\n\n        return colPointArray;\n      },\n      Array.from(Array(5), () => 1)\n    )\n    .reduce((a, b) => a + b);\n\n  const diagonalOnePoint = numberBucket.reduce(\n    (diagonalScore, currentItem, currentIndex) => {\n      diagonalScore =\n        diagonalScore && currentItem[currentIndex].isMarked ? 1 : 0;\n      return diagonalScore;\n    },\n    1\n  );\n\n  const diagonalTwoPoint = numberBucket.reduce(\n    (diagonalScore, currentItem, currentIndex) => {\n      diagonalScore =\n        diagonalScore && currentItem[4 - currentIndex].isMarked ? 1 : 0;\n      return diagonalScore;\n    },\n    1\n  );\n\n  const totalPoints =\n    rowPoints + colPoints + diagonalOnePoint + diagonalTwoPoint;\n\n  const gameBoxes = numberBucket.map((numberBucketRow) =>\n    numberBucketRow.map((numberItem) => {\n      const { value, isMarked } = numberItem;\n      return (\n        <GameBox\n          key={value}\n          disabled={isMarked || !yourTurn}\n          onClick={(e) => {\n            e.preventDefault();\n            return markValue(value);\n          }}\n          isMarked={isMarked}\n        >\n          {value}\n        </GameBox>\n      );\n    })\n  );\n\n  const copyPeerIdToClipboard = () => {\n    copy(connectionState.peer && connectionState.peer.id);\n    setCopiedPeerId(true);\n  };\n\n  return (\n    <Display>\n      <DisplayGameEnd hidden={winnerStatus === null} status={winnerStatus}>\n        <div>\n          {winnerStatus === 0 && \"Draw 🤪\"}\n          {winnerStatus < 0 && \"You Lost 😅\"}\n          {winnerStatus > 0 && \"You Won 😁\"}\n        </div>\n        <RButton\n          onClick={(e) => {\n            e.preventDefault();\n            window.location.reload();\n          }}\n        >\n          Play Again\n        </RButton>\n      </DisplayGameEnd>\n\n      <GameSection hidden={isNotConnected || winnerStatus !== null}>\n        <DisplayBingoStatus>\n          <BingoStatusItem strike={totalPoints > 0}>B</BingoStatusItem>\n          <BingoStatusItem strike={totalPoints > 1}>I</BingoStatusItem>\n          <BingoStatusItem strike={totalPoints > 2}>N</BingoStatusItem>\n          <BingoStatusItem strike={totalPoints > 3}>G</BingoStatusItem>\n          <BingoStatusItem strike={totalPoints > 4}>O</BingoStatusItem>\n        </DisplayBingoStatus>\n\n        <GameBoard>{gameBoxes}</GameBoard>\n        <DisplayTurn yourTurn={yourTurn}>\n          {yourTurn ? \"Your Turn\" : \"Opponents Turn\"}\n        </DisplayTurn>\n        <BingoButton\n          onClick={(e) => {\n            e.preventDefault();\n            callBingo();\n          }}\n          hidden={totalPoints < 5}\n        >\n          CALL BINGO\n        </BingoButton>\n      </GameSection>\n\n      <ConnectionSection hidden={!isNotConnected || winnerStatus !== null}>\n        <JoinForm\n          hidden={!join}\n          onSubmit={(e) => {\n            e.preventDefault();\n            joinToPeer(opponentPeerId);\n          }}\n        >\n          <PeerIdInput\n            value={opponentPeerId}\n            placeholder=\"Enter Room Id\"\n            required\n            onChange={(e) => setOpponentPeerId(e.target.value)}\n          />\n          <RButton>Join</RButton>\n          <div>or</div>\n          <RButton\n            onClick={(e) => {\n              e.preventDefault();\n              setJoin(false);\n            }}\n          >\n            Create And Share Id\n          </RButton>\n        </JoinForm>\n        <CreateForm hidden={join}>\n          <DisplayPeerId onClick={copyPeerIdToClipboard}>\n            {(connectionState.peer && connectionState.peer.id) ||\n              \"Creating Id...\"}\n          </DisplayPeerId>\n          <div hidden={!copiedPeerId}>\n            (Share Id with opponent and wait for them to join. Do not go back!)\n          </div>\n          <RButton\n            onClick={(e) => {\n              e.preventDefault();\n              setJoin(true);\n            }}\n          >\n            Back\n          </RButton>\n          <CopyButton\n            copied={copiedPeerId ? true : false}\n            onClick={(e) => {\n              e.preventDefault();\n              copyPeerIdToClipboard();\n            }}\n          >\n            {copiedPeerId ? \"Copied\" : \"Copy\"}\n          </CopyButton>\n        </CreateForm>\n        <ReadInstructionsLink\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://github.com/RabiRoshan/bingo#instructions\"\n        >\n          Read Instructions\n        </ReadInstructionsLink>\n      </ConnectionSection>\n    </Display>\n  );\n};\n\nexport default GameScreen;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameScreen from \"./presentation/GameScreen\";\nimport { GameProvider } from \"./application/gameContext\";\n\nfunction App() {\n  return (\n    <GameProvider>\n      <GameScreen />\n    </GameProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}