{"version":3,"sources":["../node_modules/peerjs/dist sync","application/gameContext.js","presentation/utils/arrayShuffle.js","presentation/GameScreen.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","peer","Peer","GameContext","createContext","numberBucket","GameProvider","props","random25","generateRandom0to25","useState","Array","from","_","row","col","setNumberBucket","yourTurn","setYourTurn","markValue","value","fromOpponent","connectionState","opponentPeer","send","updatedBucket","map","numberBucketRow","rowIndex","numberItem","colIndex","isMarked","setConnectionState","on","peerId","console","log","conn","onConnection","data","connect","err","Provider","opponentPeerId","children","array","t","i","m","length","Math","floor","random","shuffleArray","index","GameWindow","styled","div","GameBoard","GameBox","button","css","BingoButton","hide","GameScreen","useContext","joinToPeer","setOpponentPeerId","isConnected","totalPoints","reduce","currentItem","isBingo","colPointArray","forEach","item","a","b","gameBoxes","key","disabled","onClick","preventDefault","Fragment","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.479d2b30.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","import React, { useState, createContext } from \"react\";\nimport { shuffleArray } from \"../presentation/utils/arrayShuffle\";\nimport Peer from \"peerjs\";\nconst peer = new Peer();\n\nexport const GameContext = createContext({ numberBucket: [] });\n\nexport const GameProvider = (props) => {\n  const random25 = generateRandom0to25();\n\n  const [numberBucket, setNumberBucket] = useState(\n    Array.from(Array(5), (_, row) =>\n      Array.from(Array(5), (_, col) => random25[row * 5 + col])\n    )\n  );\n\n  const [yourTurn, setYourTurn] = useState(true);\n\n  const markValue = (value, fromOpponent = false) => {\n    if (!fromOpponent) {\n      setYourTurn(false);\n      connectionState.opponentPeer.send({ value });\n    } else {\n      setYourTurn(true);\n    }\n    const updatedBucket = numberBucket.map((numberBucketRow, rowIndex) =>\n      numberBucketRow.map((numberItem, colIndex) => {\n        if (numberItem.value === value) {\n          numberItem.isMarked = true;\n        }\n        return numberItem;\n      })\n    );\n    setNumberBucket(updatedBucket);\n  };\n\n  // PeerJS\n  const [connectionState, setConnectionState] = useState({\n    peer: null,\n    opponentPeer: null,\n  });\n\n  peer.on(\"open\", (peerId) => {\n    console.log(`Your peer ID is: ${peerId}`);\n    setConnectionState({ ...connectionState, peer });\n  });\n\n  peer.on(\"disconnected\", () => {\n    console.log(`Disconnected from peer server`);\n    setConnectionState({ ...connectionState, peer: null });\n  });\n\n  peer.on(\"connection\", (conn) => onConnection(conn));\n\n  const joinToPeer = (opponentPeerId) => {\n    const opponentPeer = peer.connect(opponentPeerId);\n    setYourTurn(false);\n    onConnection(opponentPeer);\n  };\n\n  const onConnection = (opponentPeer) => {\n    console.log(`Connecting to: ${opponentPeer.peer}`);\n    opponentPeer.on(\"open\", () => {\n      console.log(\"Connected!\");\n      setConnectionState({ ...connectionState, opponentPeer });\n    });\n    opponentPeer.on(\"data\", (data) => {\n      console.log(`Data from ${opponentPeer.peer}: ${data}`);\n      if (data.value) {\n        markValue(data.value, true);\n      }\n    });\n    opponentPeer.on(\"close\", () => {\n      console.log(`Connection closed with: ${opponentPeer.peer}`);\n      console.log(\"Reconnecting...\");\n      peer.connect(opponentPeer.peer);\n    });\n    opponentPeer.on(\"error\", (err) =>\n      console.log(`Connection Error with ${opponentPeer.peer}: ${err}`)\n    );\n  };\n\n  return (\n    <GameContext.Provider\n      value={[numberBucket, markValue, connectionState, joinToPeer, yourTurn]}\n    >\n      {props.children}\n    </GameContext.Provider>\n  );\n};\n\nconst generateRandom0to25 = () =>\n  shuffleArray(\n    Array.from(Array(25), (_, index) => {\n      return { value: index + 1, isMarked: false };\n    })\n  );\n","/// Fisher–Yates Shuffle\nexport const shuffleArray = (array) => {\n  let m = array.length,\n    t,\n    i;\n\n  // While there remain elements to shuffle…\n  while (m) {\n    // Pick a remaining element…\n    i = Math.floor(Math.random() * m--);\n\n    // And swap it with the current element.\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n};\n","import React, { useContext, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { GameContext } from \"../application/gameContext\";\n\nconst GameWindow = styled.div`\n  text-align: center;\n`;\nconst GameBoard = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, auto);\n  grid-template-rows: auto;\n  gap: 0.5vw;\n  place-content: center;\n  @media (max-width: 768px) {\n    gap: 2vw;\n  }\n`;\n\nconst GameBox = styled.button`\n  background-color: slateblue;\n  color: white;\n  font-size: 2vw;\n  height: 5vw;\n  width: 5vw;\n  border: none;\n  text-align: center;\n\n  :focus {\n    outline: none;\n  }\n\n  :active {\n    background-color: white;\n    color: slateblue;\n  }\n\n  ${(props) =>\n    props.isMarked &&\n    css`\n      background-color: red;\n      color: white;\n    `};\n\n  @media (max-width: 768px) {\n    height: 15vw;\n    width: 15vw;\n    font-size: 6vw;\n  }\n`;\n\nconst BingoButton = styled.button`\n  background-color: slategray;\n  color: white;\n  font-size: 2vw;\n  border: none;\n  text-align: center;\n\n  :focus {\n    outline: none;\n  }\n\n  :active {\n    background-color: white;\n    color: slategray;\n  }\n\n  ${(props) =>\n    props.hide &&\n    css`\n      display: none;\n    `};\n`;\n\nconst GameScreen = () => {\n  const [\n    numberBucket,\n    markValue,\n    connectionState,\n    joinToPeer,\n    yourTurn,\n  ] = useContext(GameContext);\n\n  const [opponentPeerId, setOpponentPeerId] = useState(\"\");\n\n  const isConnected = connectionState.peer && connectionState.opponentPeer;\n\n  const rowPoints = numberBucket.reduce((totalPoints, currentItem) => {\n    const isRowBingo = currentItem.reduce((isBingo, currentItem) => {\n      return isBingo && currentItem.isMarked;\n    }, true);\n    return isRowBingo ? ++totalPoints : totalPoints;\n  }, 0);\n\n  const colPoints = numberBucket\n    .reduce(\n      (colPointArray, currentItem) => {\n        currentItem.forEach((item, index) => {\n          colPointArray[index] = colPointArray[index] && item.isMarked ? 1 : 0;\n        });\n\n        return colPointArray;\n      },\n      Array.from(Array(5), () => 1)\n    )\n    .reduce((a, b) => a + b);\n\n  const totalPoints = rowPoints + colPoints;\n\n  const gameBoxes = numberBucket.map((numberBucketRow) =>\n    numberBucketRow.map((numberItem) => {\n      const { value, isMarked } = numberItem;\n      return (\n        <GameBox\n          key={value}\n          disabled={isMarked || !yourTurn}\n          onClick={(e) => {\n            e.preventDefault();\n            return markValue(value);\n          }}\n          isMarked={isMarked}\n        >\n          {value}\n        </GameBox>\n      );\n    })\n  );\n\n  return (\n    <GameWindow>\n      {isConnected ? (\n        <React.Fragment>\n          <GameBoard>{gameBoxes}</GameBoard>\n          <div>{!yourTurn ? \"Opponents Turn\" : \"Your Turn\"}</div>\n          <BingoButton hide={totalPoints < 5}>Bingo</BingoButton>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <input\n            value={opponentPeerId}\n            onChange={(e) => setOpponentPeerId(e.target.value)}\n          />\n          <button\n            onClick={(e) => {\n              e.preventDefault();\n              joinToPeer(opponentPeerId);\n            }}\n          >\n            Join\n          </button>\n        </React.Fragment>\n      )}\n    </GameWindow>\n  );\n};\n\nexport default GameScreen;\n","import React from \"react\";\nimport \"./App.css\";\nimport GameScreen from \"./presentation/GameScreen\";\nimport { GameProvider } from \"./application/gameContext\";\n\nfunction App() {\n  return (\n    <GameProvider>\n      <GameScreen />\n    </GameProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}